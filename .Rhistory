knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(tidyverse)
taylor_album_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_album_songs.csv')
taylor_all_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_all_songs.csv')
taylor_albums <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_albums.csv')
View(taylor_albums)
# 1. Top 5 albums with highest Metacritic score
top_5_metacritic <- taylor_albums[order(-taylor_albums$metacritic_score, na.last = NA), ][1:5, "album_name"]
# 2. Bottom 5 albums with lowest Metacritic score
bottom_5_metacritic <- taylor_albums[order(taylor_albums$metacritic_score, na.last = NA), ][1:5, "album_name"]
# 3. Top 5 albums with highest user score
top_5_user <- taylor_albums[order(-taylor_albums$user_score, na.last = NA), ][1:5, "album_name"]
# 4. Bottom 5 albums with lowest user score
bottom_5_user <- taylor_albums[order(taylor_albums$user_score, na.last = NA), ][1:5, "album_name"]
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- intersect(top_5_metacritic, top_5_user)
# Find the intersection of bottom 5 Metacritic and bottom 5 user scores
bottom_intersection <- intersect(bottom_5_metacritic, bottom_5_user)
# Print the intersections
print(top_intersection)
print(bottom_intersection)
print(top_5_metacritic)
print(top_5_user)
print(bottom_5_metacritic)
print(bottom_5_user)
print(top_intersection)
print(bottom_intersection)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- intersect(top_5_metacritic, top_5_user)[1:3]
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- intersect(top_5_metacritic, top_5_user)[1:3]
top_intersection <- top_intersection[1:min(3, length(top_intersection))]
top_intersection
print(top_intersection)
library(dplyr)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
inner_join(top_5_user)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
inner_join(top_5_user, by = album_name)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
inner_join(top_5_user, by = "album_name")
top_intersection
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
inner_join(top_5_user, by = "album_name")[1:3]
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
inner_join(top_5_user, by = "album_name") %>%
slice(1:3)
top_intersection
top_intersection
# Find the intersection of bottom 5 Metacritic and bottom 5 user scores
bottom_intersection <- bottom_5_metacritic %>%
inner_join(bottom_5_user, by = "album_name") %>%
slice(1:3)
bottom_intersection
bottom_intersection
# 1. Top 5 albums with highest Metacritic score
top_5_metacritic <- taylor_albums %>%
arrange(desc(metacritic_score)) %>%
slice(1:5)
top_5_metacritic
# 1. Top 5 albums with highest Metacritic score
top_5_metacritic <- taylor_albums %>%
arrange(desc(metacritic_score)) %>%
slice(1:5)
# 2. Bottom 5 albums with lowest Metacritic score
bottom_5_metacritic <- taylor_albums %>%
arrange(metacritic_score) %>%
filter(!is.na(metacritic_score)) %>%  # Remove NA values
slice(1:5)
# 3. Top 5 albums with highest user score
top_5_user <- taylor_albums %>%
arrange(desc(user_score)) %>%
filter(!is.na(user_score)) %>%
slice(1:5)
# 1. Top 5 albums with highest Metacritic score
top_5_metacritic <- taylor_albums %>%
arrange(desc(metacritic_score)) %>%
filter(!is.na(metacritic_score)) %>%
slice(1:5)
# 2. Bottom 5 albums with lowest Metacritic score
bottom_5_metacritic <- taylor_albums %>%
arrange(metacritic_score) %>%
filter(!is.na(metacritic_score)) %>%
slice(1:5)
# 3. Top 5 albums with highest user score
top_5_user <- taylor_albums %>%
arrange(desc(user_score)) %>%
filter(!is.na(user_score)) %>%
slice(1:5)
# 4. Bottom 5 albums with lowest user score
bottom_5_user <- taylor_albums %>%
arrange(user_score) %>%
filter(!is.na(user_score)) %>%
slice(1:5)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
inner_join(top_5_user, by = "album_name") %>%
slice(1:3)
# Find the intersection of bottom 5 Metacritic and bottom 5 user scores
bottom_intersection <- bottom_5_metacritic %>%
inner_join(bottom_5_user, by = "album_name") %>%
slice(1:3)
# Print the intersections
print(top_intersection)
print(bottom_intersection)
# Top 3 are Red (Taylor's Version), folklore, evermore,
# Bottom 3 are reputation, Fearless, 1989
# 1. Top 5 albums with highest Metacritic score
top_5_metacritic <- taylor_albums %>%
arrange(desc(metacritic_score)) %>%
filter(!is.na(metacritic_score)) %>%
slice(1:5)
# 2. Bottom 5 albums with lowest Metacritic score
bottom_5_metacritic <- taylor_albums %>%
arrange(metacritic_score) %>%
filter(!is.na(metacritic_score)) %>%
slice(1:5)
# 3. Top 5 albums with highest user score
top_5_user <- taylor_albums %>%
arrange(desc(user_score)) %>%
filter(!is.na(user_score)) %>%
slice(1:5)
# 4. Bottom 5 albums with lowest user score
bottom_5_user <- taylor_albums %>%
arrange(user_score) %>%
filter(!is.na(user_score)) %>%
slice(1:5)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
semi_join(top_5_user, by = "album_name") %>%
slice(1:3)
# Find the intersection of bottom 5 Metacritic and bottom 5 user scores
bottom_intersection <- bottom_5_metacritic %>%
semi_join(bottom_5_user, by = "album_name") %>%
slice(1:3)
# Print the intersections
print(top_intersection)
print(bottom_intersection)
# Top 3 are Red (Taylor's Version), folklore, evermore,
# Bottom 3 are reputation, Fearless, 1989
# 1. Top 5 albums with highest Metacritic score
top_5_metacritic <- taylor_albums %>%
arrange(desc(metacritic_score)) %>%
filter(!is.na(metacritic_score)) %>%
slice(1:5) %>%
select(album_name)
# 2. Bottom 5 albums with lowest Metacritic score
bottom_5_metacritic <- taylor_albums %>%
arrange(metacritic_score) %>%
filter(!is.na(metacritic_score)) %>%
slice(1:5) %>%
select(album_name)
# 3. Top 5 albums with highest user score
top_5_user <- taylor_albums %>%
arrange(desc(user_score)) %>%
filter(!is.na(user_score)) %>%
slice(1:5) %>%
select(album_name)
# 4. Bottom 5 albums with lowest user score
bottom_5_user <- taylor_albums %>%
arrange(user_score) %>%
filter(!is.na(user_score)) %>%
slice(1:5) %>%
select(album_name)
# Find the intersection of top 5 Metacritic and top 5 user scores
top_intersection <- top_5_metacritic %>%
semi_join(top_5_user, by = "album_name") %>%
slice(1:3) %>%
select(album_name)
# Find the intersection of bottom 5 Metacritic and bottom 5 user scores
bottom_intersection <- bottom_5_metacritic %>%
semi_join(bottom_5_user, by = "album_name") %>%
slice(1:3) %>%
select(album_name)
# Print the intersections
print(top_intersection)
print(bottom_intersection)
# Top 3 are Red (Taylor's Version), folklore, evermore,
# Bottom 3 are reputation, Fearless, 1989
top_intersection
taylor_all_songs
str(taylor_all_songs)
View(taylor_all_songs)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(gridExtra)
library(tidyverse)
library(stringr)
library(lubridate)
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
library(viridis)
library(gridExtra)
taylor_album_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_album_songs.csv')
taylor_all_songs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_all_songs.csv')
taylor_albums <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-10-17/taylor_albums.csv')
# Convert track_release to Date format and extract year
taylor_album_songs$track_release <- as.Date(taylor_album_songs$track_release)
taylor_album_songs$year_group <- cut(taylor_album_songs$track_release,
breaks = as.Date(c("2005-01-01", "2010-01-01", "2015-01-01", "2020-01-01", "2025-01-01")),
labels = c("2006-2009", "2010-2014", "2015-2019", "2020-2024"))
# List of features to explore
features <- c("danceability", "energy", "loudness", "speechiness",
"acousticness", "instrumentalness", "liveness",
"valence", "tempo")
# Create all possible pairs of features
feature_pairs <- t(combn(features, 2))
# Function to create scatter plots with LOESS lines for each pair of features
create_scatter_plot <- function(feature_x, feature_y) {
ggplot(taylor_album_songs, aes_string(x = feature_x, y = feature_y)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "red") +
facet_wrap(~ year_group) +
labs(title = paste(feature_y, "vs", feature_x, "by Year Group"),
x = feature_x,
y = feature_y) +
theme_minimal()
}
# Plot each pair of features
for (pair in seq_len(nrow(feature_pairs))) {
print(create_scatter_plot(feature_pairs[pair, 1], feature_pairs[pair, 2]))
}
View(taylor_albums)
View(taylor_album_songs)
print(feature_pairs)
length(feature_pairs)
t(combn(features, 2))
# Convert track_release to Date format and extract year
taylor_album_songs$track_release <- as.Date(taylor_album_songs$track_release)
taylor_album_songs$year_group <- cut(taylor_album_songs$track_release,
breaks = as.Date(c("2005-01-01", "2010-01-01", "2015-01-01", "2020-01-01", "2025-01-01")),
labels = c("2006-2009", "2010-2014", "2015-2019", "2020-2024"))
# List of features to explore
features <- c("danceability", "energy", "loudness", "speechiness",
"acousticness", "instrumentalness", "liveness",
"valence", "tempo")
# Create all possible pairs of features
feature_pairs <- t(combn(features, 2))
# Function to create scatter plots with LOESS lines for each pair of features
create_scatter_plot <- function(feature_x, feature_y) {
ggplot(taylor_album_songs, aes_string(x = feature_x, y = feature_y)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "red") +
facet_wrap(~ year_group) +
labs(title = paste(feature_y, "vs", feature_x, "by Year Group"),
x = feature_x,
y = feature_y) +
theme_minimal()
}
# Plot each pair of features
for (pair in seq_len(nrow(feature_pairs))) {
print(create_scatter_plot(feature_pairs[pair, 1], feature_pairs[pair, 2]))
}
# Standardize features in taylor_album_songs
taylor_album_songs[features] <- scale(taylor_album_songs[features])
# Convert track_release to Date format and extract year
taylor_album_songs$track_release <- as.Date(taylor_album_songs$track_release)
taylor_album_songs$year_group <- cut(taylor_album_songs$track_release,
breaks = as.Date(c("2005-01-01", "2010-01-01", "2015-01-01", "2020-01-01", "2025-01-01")),
labels = c("2006-2009", "2010-2014", "2015-2019", "2020-2024"))
# List of features to explore
features <- c("danceability", "energy", "loudness", "speechiness",
"acousticness", "instrumentalness", "liveness",
"valence", "tempo")
# Create all possible pairs of features
feature_pairs <- t(combn(features, 2))
# Standardize features in taylor_album_songs
taylor_album_songs[features] <- scale(taylor_album_songs[features])
# Function to create scatter plots with LOESS lines for each pair of features
create_scatter_plot <- function(feature_x, feature_y) {
ggplot(taylor_album_songs, aes_string(x = feature_x, y = feature_y)) +
geom_point() +
geom_smooth(method = "loess", se = FALSE, color = "red") +
facet_wrap(~ year_group) +
labs(title = paste(feature_y, "vs", feature_x, "by Year Group"),
x = feature_x,
y = feature_y) +
theme_minimal()
}
# Plot each pair of features
for (pair in seq_len(nrow(feature_pairs))) {
print(create_scatter_plot(feature_pairs[pair, 1], feature_pairs[pair, 2]))
}
View(taylor_all_songs)
View(taylor_album_songs)
View(taylor_albums)
View(taylor_albums)
View(taylor_album_songs)
table(taylor_album_songs)
table(taylor_album_songs$year_group)
table(taylor_album_songs$album_name)
View(taylor_all_songs)
table(taylor_all_songs$album_name)
View(taylor_album_songs)
length(taylor_album_songs)
dim(taylor_album_songs)
table(key_mode)
table(taylor_album_songs$key_mode)
table(taylor_album_songs$mode_name)
table(taylor_album_songs$key_name)
table(taylor_album_songs$key)
table(taylor_album_songs$duration_ms)
table(taylor_album_songs$time_signature)
table(taylor_album_songs$tempo)
table(taylor_album_songs$key)
View(taylor_all_songs)
View(taylor_albums)
